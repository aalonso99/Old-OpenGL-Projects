#ifndef GEOMETRY_H
#define GEOMETRY_H

#include <GL/gl.h>
#include <GL/glu.h>
#include <cmath>

constexpr GLfloat PI=3.14159;
const GLint ACCURACY=50;

void crossProduct(GLfloat u[], GLfloat v[], GLfloat result[]);
GLfloat scalarProd(GLfloat u[], GLfloat v[]);
GLfloat distance2D(GLfloat u[], GLfloat v[]);
GLfloat distance3D(GLfloat u[], GLfloat v[]);
GLfloat norm2D(GLfloat v[]);
GLfloat norm3D(GLfloat v[]);
GLfloat angle(GLfloat u[], GLfloat v[]);
//Stores in result the coordinates of the closest point to u in the line generated by the point p and the vector v
//PRECONDITION: result must be initialized and at least of size 3 
//(since I am not using std::vector there is no way to check the size of the array)
void closest_point(GLfloat u[], GLfloat p[], GLfloat v[], GLfloat result[]);

void drawCube();
void drawFramedCube(GLfloat *color, GLfloat *frameColor, GLfloat frameRadius);

void drawCircle(GLfloat r, int num_segments, GLfloat* centre);

void drawDisk(GLfloat r, GLfloat *centre, int num_triangles);

void drawTorus(double r1, double r2, int num_circles, int num_segments);

void drawCylinder(GLfloat base_center[], GLfloat top_center[], float radius, int num_sides);

void drawSphere(GLfloat radius);

#endif